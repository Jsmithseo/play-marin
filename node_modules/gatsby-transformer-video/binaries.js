"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.libsInstalled = libsInstalled;
exports.libsAlreadyDownloaded = libsAlreadyDownloaded;
exports.downloadLibs = downloadLibs;

var _path = require("path");

var _execa = _interopRequireDefault(require("execa"));

var _fsExtra = require("fs-extra");

async function libsInstalled({
  platform
}) {
  try {
    const isInstalledCommand = platform === `win32` ? `WHERE` : `command`;
    const isInstalledParams = platform === `win32` ? [] : [`-v`];
    await (0, _execa.default)(isInstalledCommand, [...isInstalledParams, `ffmpeg`]);
    await (0, _execa.default)(isInstalledCommand, [...isInstalledParams, `ffprobe`]);
    return true;
  } catch {
    return false;
  }
}

async function libsAlreadyDownloaded({
  binariesDir
}) {
  await (0, _fsExtra.access)((0, _path.resolve)(binariesDir, `ffmpeg`));
  await (0, _fsExtra.access)((0, _path.resolve)(binariesDir, `ffprobe`));
}

async function downloadLibs({
  binariesDir,
  platform
}) {
  const execaConfig = {
    cwd: binariesDir,
    stdout: `inherit`,
    stderr: `inherit`
  };
  await (0, _fsExtra.ensureDir)(binariesDir);

  switch (platform) {
    case `win32`:
      console.log(`Downloading FFMPEG && FFPROBE (Note: This script is not yet tested on windows)`);
      await (0, _execa.default)(`curl`, [`-L`, `-o`, `ffmpeg.zip`, `https://ffmpeg.zeranoe.com/builds/win64/static/ffmpeg-latest-win64-static.zip`], execaConfig);
      console.log(`Unzipping FFMPEG && FFPROBE`);
      await (0, _execa.default)(`tar`, [`-xf`, `ffmpeg.zip`], execaConfig);
      console.log(`Cleanup`);
      await (0, _execa.default)(`mv`, [`bin/*`, `.`], execaConfig);
      await (0, _execa.default)(`rm`, [`-rf`, `ffmpeg-latest-win64-static`], execaConfig);
      break;

    case `linux`:
      console.log(`Downloading FFMPEG && FFPROBE`);
      await (0, _execa.default)(`wget`, [`-O`, `ffmpeg.zip`, `https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz`], execaConfig);
      console.log(`Unzipping FFMPEG && FFPROBE`);
      await (0, _execa.default)(`tar`, [`-xf`, `ffmpeg.zip`, `--strip`, `1`], execaConfig);
      console.log(`Cleanup`);
      await (0, _execa.default)(`rm`, [`ffmpeg.zip`], execaConfig);
      break;

    case `darwin`:
      console.log(`Downloading FFMPEG`);
      await (0, _execa.default)(`curl`, [`-L`, `-J`, `-o`, `ffmpeg.zip`, `https://evermeet.cx/ffmpeg/getrelease/zip`], execaConfig);
      console.log(`Downloading FFPROBE`);
      await (0, _execa.default)(`curl`, [`-L`, `-o`, `ffprobe.zip`, `https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip`], execaConfig);
      console.log(`Unzipping...`);
      await (0, _execa.default)(`unzip`, [`-o`, `ffmpeg.zip`], execaConfig);
      await (0, _execa.default)(`unzip`, [`-o`, `ffprobe.zip`], execaConfig);
      console.log(`Cleanup...`);
      await (0, _execa.default)(`rm`, [`ffmpeg.zip`, `ffprobe.zip`], execaConfig);
      break;

    default:
      throw new Error(`Downloading FFMPEG for ${platform} is not supported`);
  }
}