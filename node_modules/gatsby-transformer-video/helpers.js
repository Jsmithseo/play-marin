"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.cacheContentfulVideo = cacheContentfulVideo;

var _fs = _interopRequireDefault(require("fs"));

var _fsExtra = require("fs-extra");

var _path = require("path");

var _pQueue = _interopRequireDefault(require("p-queue"));

var _axios = _interopRequireDefault(require("axios"));

const downloadQueue = new _pQueue.default({
  concurrency: 3
});
const downloadCache = {};
/**
 * Download and cache video from Contentful for further processing
 *
 * This is not using createRemoteFileNode of gatsby-source-filesystem because of:
 *
 * Retry is currently broken: https://github.com/gatsbyjs/gatsby/issues/22010
 * Downloaded files are not cached properly: https://github.com/gatsbyjs/gatsby/issues/8324 & https://github.com/gatsbyjs/gatsby/pull/8379
 */

async function cacheContentfulVideo({
  video,
  cacheDir
}) {
  const {
    file: {
      url,
      fileName
    }
  } = video;
  const path = (0, _path.resolve)(cacheDir, fileName);

  try {
    await (0, _fsExtra.access)(path, _fs.default.constants.R_OK);
    console.log(`Already downloaded ${url}`);
    downloadCache[url] = path;
    return downloadCache[url];
  } catch {
    if (url in downloadCache) {
      console.log(`Already downloading ${url}`);
      return downloadCache[url];
    }

    async function queuedDownload() {
      let tries = 0;
      let downloaded = false;

      while (!downloaded) {
        try {
          await downloadQueue.add(async () => {
            console.log(`Downloading https:${url}`);
            const response = await (0, _axios.default)({
              method: `get`,
              url: `https:${url}`,
              responseType: `stream`
            });
            console.log(`Writing ${fileName} to disk`);
            await new Promise((resolve, reject) => {
              const file = _fs.default.createWriteStream(path);

              file.on(`finish`, resolve);
              file.on(`error`, reject);
              response.data.pipe(file);
            });
            downloaded = true;
          });
        } catch (e) {
          tries++;

          if (tries === 3) {
            throw new Error(`Download of https:${url} failed after three times:\n\n${e}`);
          }

          console.log(`Unable to download https:${url}\n\nRetrying again after 1s (${tries}/3)`);
          console.error(e);
          console.log(Object.keys(e), e.message);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      return path;
    }

    downloadCache[url] = queuedDownload();
    return downloadCache[url];
  }
}